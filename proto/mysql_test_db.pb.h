// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysql_test_db.proto

#ifndef PROTOBUF_mysql_5ftest_5fdb_2eproto__INCLUDED
#define PROTOBUF_mysql_5ftest_5fdb_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mysql_5ftest_5fdb_2eproto();
void protobuf_AssignDesc_mysql_5ftest_5fdb_2eproto();
void protobuf_ShutdownFile_mysql_5ftest_5fdb_2eproto();

class Person;
class Mysql_Test_DB;

// ===================================================================

class Person : public ::google::protobuf::Message {
 public:
  Person();
  virtual ~Person();
  
  Person(const Person& from);
  
  inline Person& operator=(const Person& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Person& default_instance();
  
  void Swap(Person* other);
  
  // implements Message ----------------------------------------------
  
  Person* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Person& from);
  void MergeFrom(const Person& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional string email = 3;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 3;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  
  // optional int32 phone = 4;
  inline bool has_phone() const;
  inline void clear_phone();
  static const int kPhoneFieldNumber = 4;
  inline ::google::protobuf::int32 phone() const;
  inline void set_phone(::google::protobuf::int32 value);
  
  // optional string unsure = 5;
  inline bool has_unsure() const;
  inline void clear_unsure();
  static const int kUnsureFieldNumber = 5;
  inline const ::std::string& unsure() const;
  inline void set_unsure(const ::std::string& value);
  inline void set_unsure(const char* value);
  inline void set_unsure(const char* value, size_t size);
  inline ::std::string* mutable_unsure();
  inline ::std::string* release_unsure();
  
  // @@protoc_insertion_point(class_scope:Person)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_email();
  inline void clear_has_email();
  inline void set_has_phone();
  inline void clear_has_phone();
  inline void set_has_unsure();
  inline void clear_has_unsure();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 phone_;
  ::std::string* email_;
  ::std::string* unsure_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_mysql_5ftest_5fdb_2eproto();
  friend void protobuf_AssignDesc_mysql_5ftest_5fdb_2eproto();
  friend void protobuf_ShutdownFile_mysql_5ftest_5fdb_2eproto();
  
  void InitAsDefaultInstance();
  static Person* default_instance_;
};
// -------------------------------------------------------------------

class Mysql_Test_DB : public ::google::protobuf::Message {
 public:
  Mysql_Test_DB();
  virtual ~Mysql_Test_DB();
  
  Mysql_Test_DB(const Mysql_Test_DB& from);
  
  inline Mysql_Test_DB& operator=(const Mysql_Test_DB& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Mysql_Test_DB& default_instance();
  
  void Swap(Mysql_Test_DB* other);
  
  // implements Message ----------------------------------------------
  
  Mysql_Test_DB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Mysql_Test_DB& from);
  void MergeFrom(const Mysql_Test_DB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .Person person = 1;
  inline int person_size() const;
  inline void clear_person();
  static const int kPersonFieldNumber = 1;
  inline const ::Person& person(int index) const;
  inline ::Person* mutable_person(int index);
  inline ::Person* add_person();
  inline const ::google::protobuf::RepeatedPtrField< ::Person >&
      person() const;
  inline ::google::protobuf::RepeatedPtrField< ::Person >*
      mutable_person();
  
  // @@protoc_insertion_point(class_scope:Mysql_Test_DB)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::Person > person_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_mysql_5ftest_5fdb_2eproto();
  friend void protobuf_AssignDesc_mysql_5ftest_5fdb_2eproto();
  friend void protobuf_ShutdownFile_mysql_5ftest_5fdb_2eproto();
  
  void InitAsDefaultInstance();
  static Mysql_Test_DB* default_instance_;
};
// ===================================================================


// ===================================================================

// Person

// required int32 id = 1;
inline bool Person::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Person::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Person::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Person::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Person::id() const {
  return id_;
}
inline void Person::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string name = 2;
inline bool Person::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Person::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Person::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Person::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Person::name() const {
  return *name_;
}
inline void Person::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Person::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Person::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Person::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Person::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string email = 3;
inline bool Person::has_email() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Person::set_has_email() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Person::clear_has_email() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Person::clear_email() {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& Person::email() const {
  return *email_;
}
inline void Person::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void Person::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void Person::set_email(const char* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Person::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  return email_;
}
inline ::std::string* Person::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 phone = 4;
inline bool Person::has_phone() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Person::set_has_phone() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Person::clear_has_phone() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Person::clear_phone() {
  phone_ = 0;
  clear_has_phone();
}
inline ::google::protobuf::int32 Person::phone() const {
  return phone_;
}
inline void Person::set_phone(::google::protobuf::int32 value) {
  set_has_phone();
  phone_ = value;
}

// optional string unsure = 5;
inline bool Person::has_unsure() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Person::set_has_unsure() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Person::clear_has_unsure() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Person::clear_unsure() {
  if (unsure_ != &::google::protobuf::internal::kEmptyString) {
    unsure_->clear();
  }
  clear_has_unsure();
}
inline const ::std::string& Person::unsure() const {
  return *unsure_;
}
inline void Person::set_unsure(const ::std::string& value) {
  set_has_unsure();
  if (unsure_ == &::google::protobuf::internal::kEmptyString) {
    unsure_ = new ::std::string;
  }
  unsure_->assign(value);
}
inline void Person::set_unsure(const char* value) {
  set_has_unsure();
  if (unsure_ == &::google::protobuf::internal::kEmptyString) {
    unsure_ = new ::std::string;
  }
  unsure_->assign(value);
}
inline void Person::set_unsure(const char* value, size_t size) {
  set_has_unsure();
  if (unsure_ == &::google::protobuf::internal::kEmptyString) {
    unsure_ = new ::std::string;
  }
  unsure_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Person::mutable_unsure() {
  set_has_unsure();
  if (unsure_ == &::google::protobuf::internal::kEmptyString) {
    unsure_ = new ::std::string;
  }
  return unsure_;
}
inline ::std::string* Person::release_unsure() {
  clear_has_unsure();
  if (unsure_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = unsure_;
    unsure_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Mysql_Test_DB

// repeated .Person person = 1;
inline int Mysql_Test_DB::person_size() const {
  return person_.size();
}
inline void Mysql_Test_DB::clear_person() {
  person_.Clear();
}
inline const ::Person& Mysql_Test_DB::person(int index) const {
  return person_.Get(index);
}
inline ::Person* Mysql_Test_DB::mutable_person(int index) {
  return person_.Mutable(index);
}
inline ::Person* Mysql_Test_DB::add_person() {
  return person_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Person >&
Mysql_Test_DB::person() const {
  return person_;
}
inline ::google::protobuf::RepeatedPtrField< ::Person >*
Mysql_Test_DB::mutable_person() {
  return &person_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mysql_5ftest_5fdb_2eproto__INCLUDED
